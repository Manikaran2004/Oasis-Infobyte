import tkinter as tk
from tkinter import messagebox
import random
import string
class PasswordGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Advanced Password Generator")
        # Length of the password
        self.length_label = tk.Label(root, text="Password Length:")
        self.length_label.grid(row=0, column=0, padx=10, pady=10)
        self.length_entry = tk.Entry(root)
        self.length_entry.grid(row=0, column=1, padx=10, pady=10)
        # Options for password complexity
        self.uppercase_var = tk.BooleanVar()
        self.lowercase_var = tk.BooleanVar()
        self.numbers_var = tk.BooleanVar()
        self.special_var = tk.BooleanVar()
        self.uppercase_check = tk.Checkbutton(root, text="Include Uppercase", variable=self.uppercase_var)
        self.uppercase_check.grid(row=1, column=0, padx=10, pady=5, columnspan=2)
        self.lowercase_check = tk.Checkbutton(root, text="Include Lowercase", variable=self.lowercase_var)
        self.lowercase_check.grid(row=2, column=0, padx=10, pady=5, columnspan=2)
        self.numbers_check = tk.Checkbutton(root, text="Include Numbers", variable=self.numbers_var)
        self.numbers_check.grid(row=3, column=0, padx=10, pady=5, columnspan=2)
        self.special_check = tk.Checkbutton(root, text="Include Special Characters", variable=self.special_var)
        self.special_check.grid(row=4, column=0, padx=10, pady=5, columnspan=2)
        self.generate_button = tk.Button(root, text="Generate Password", command=self.generate_password)
        self.generate_button.grid(row=5, column=0, columnspan=2, pady=10)
        self.password_label = tk.Label(root, text="Generated Password:")
        self.password_label.grid(row=6, column=0, padx=10, pady=10)
        self.password_entry = tk.Entry(root, state='readonly')
        self.password_entry.grid(row=6, column=1, padx=10, pady=10)
        self.copy_button = tk.Button(root, text="Copy to Clipboard", command=self.copy_to_clipboard)
        self.copy_button.grid(row=7, column=0, columnspan=2, pady=10)
    def generate_password(self):
        try:
            length = int(self.length_entry.get())
            if length < 1:
                raise ValueError("Length must be at least 1")
            charset = ""
            if self.uppercase_var.get():
                charset += string.ascii_uppercase
            if self.lowercase_var.get():
                charset += string.ascii_lowercase
            if self.numbers_var.get():
                charset += string.digits
            if self.special_var.get():
                charset += string.punctuation
            if not charset:
                messagebox.showerror("Input error", "Please select at least one character type.")
                return
            password = self._generate_secure_password(length, charset)
            self.password_entry.config(state='normal')
            self.password_entry.delete(0, tk.END)
            self.password_entry.insert(0, password)
            self.password_entry.config(state='readonly')
        except ValueError as e:
            messagebox.showerror("Input error", str(e))
    def _generate_secure_password(self, length, charset):
        password = []
        # Ensure at least one character from each selected category
        if self.uppercase_var.get():
            password.append(random.choice(string.ascii_uppercase))
        if self.lowercase_var.get():
            password.append(random.choice(string.ascii_lowercase))
        if self.numbers_var.get():
            password.append(random.choice(string.digits))
        if self.special_var.get():
            password.append(random.choice(string.punctuation))
        while len(password) < length:
            password.append(random.choice(charset))
        random.shuffle(password)
        return ''.join(password)
    def copy_to_clipboard(self):
        password = self.password_entry.get()
        if password:
            self.root.clipboard_clear()
            self.root.clipboard_append(password)
            messagebox.showinfo("Success", "Password copied to clipboard.")
if __name__ == "__main__":
    root = tk.Tk()
    app = PasswordGeneratorApp(root)
    root.mainloop()
